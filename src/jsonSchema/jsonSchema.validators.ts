import { isValidType } from "./jsonSchema.utils"
import { isObject } from "../utils"

export const validators = {
  type: (value: unknown) => (Array.isArray(value) && value.every(isValidType)) || isValidType(value),
  description: (value: unknown) => typeof value === 'string',
  title: (value: unknown) => typeof value === 'string',
  deprecated: (value: unknown) => typeof value === 'boolean',
  readOnly: (value: unknown) => typeof value === 'boolean',
  writeOnly: (value: unknown) => typeof value === 'boolean',
  examples: (value: unknown) => Array.isArray(value),
  enum: (value: unknown) => Array.isArray(value),
  format: (value: unknown) => typeof value === 'string',
  minLength: (value: unknown) => typeof value === 'number',
  maxLength: (value: unknown) => typeof value === 'number',
  pattern: (value: unknown) => typeof value === 'string',
  multipleOf: (value: unknown) => typeof value === 'number',
  minimum: (value: unknown) => typeof value === 'number',
  exclusiveMinimum: (value: unknown) => typeof value === 'number' || typeof value === 'boolean',
  maximum: (value: unknown) => typeof value === 'number',
  exclusiveMaximum: (value: unknown) => typeof value === 'number' || typeof value === 'boolean',
  properties: (value: unknown) => isObject(value) && Object.keys(value).length,
  required: (value: unknown) => Array.isArray(value),
  patternProperties: (value: unknown) => isObject(value) && Object.keys(value).length,
  additionalProperties: (value: unknown) => typeof value === 'boolean' || isObject(value) && Object.keys(value).length,
  minProperties: (value: unknown) => typeof value === 'number',
  maxProperties: (value: unknown) => typeof value === 'number',
  propertyNames: (value: unknown) => typeof value === 'object' && value !== null && Object.keys(value).length,
  items: (value: unknown) => Array.isArray(value) || isObject(value) && Object.keys(value).length,
  additionalItems: (value: unknown) => isObject(value) && Object.keys(value).length,
  minItems: (value: unknown) => typeof value === 'number',
  maxItems: (value: unknown) => typeof value === 'number',
  uniqueItems: (value: unknown) => typeof value === 'boolean',
}
